/**
 *PriorityQueue : OrderedQueue, put the Highest Priority number to the first (head)
                 , which will first pop out, deleted
 *Heap: All parent node should larger than it child node. The root is the highest priority number
 *Both data_structure have "priority"
 */
 
 //*****************************************************************************************************

 ****************************************************************
 *    Priority_Hightest -> Priority_.... -> Priority_Smallest   *
 *           ^                                                  *
 *          head                                                * 
 *                                                              *
 *     <----------------------Queue---------------------------- *
 *     head first out                                           *
 ****************************************************************
  
 //PriorityQueue: push; pop; peek(the head) 
 push: O(n)
 pop: O(1)
 peek: O(1)
 
 public class PriorityQueue {

    static class Node {
        int value;
        int priority;   // if we choose higher valued number become the priority, then the priority = value
                        //              smaller                                                     = -value                                                      
        Node next;

        public Node(int value, int priority) {
            this.value = value;
            this.priority = priority;
        }
    }

    Node head = null;
}

    public void push(int value, int priority) {
        if (head == null) {
            head = new Node(value, priority);
            return;
        }
        Node cur = head;
        Node newNode = new Node(value, priority);
        if(head.priority < priority) {
            newNode.next = head;
            this.head = newNode;
        } else {
            while(cur.next != null && cur.next.priority > priority) {
                cur = cur.next;
            }
            newNode.next = cur.next;
            cur.next = newNode;
        }
    }
    
    public Node peek() {
        return head;
    }

    public Node pop() {
        if (head == null) {
            return null;
        }
        Node temp = head;
        head = head.next;
        return temp;
    }
    
    public boolean isEmpty() {
        return head == null;
    }
    
    
    //***********************************************************************************************
    Heap is similar as complete Binary Tree
    Heap have Max Heap and Min Heap
    Eg: Max Heap
    Max Heap still need 所有父节点的数值比各自的子节点数值大。That does means each higher level node should larger:see eg
    Compare to BST, MaxHeap don't have ask left should smaller than right node, only have parent and child.
    The root shoult be the largest
            9
            /\    
           7  1   
          /\   
        3  5 
        
     Operation: add; poll(delelte the root --the largest number); peek (the root)
     
     add O(logN): add new element to the leaf, (need to be a complete binary tree).
          The replace it by comparing to parent. If larger than parent, then replace; continue...
          
     poll O(logN): romve the root, then put the last node to the root. 
           compare the new root to it's larger child,then replace, until in a correct position
           
      peek O(1)
      
     Since heap is a complete binary tree, and use array can use less space?! Maybe.. So use array to construct
     
    array index:  0,1,2,3,4,5,6   -> 
    Heap indedx:    
             0
             /\
            1  2
           /\  /\
          3 4  5 6
          
     
     
public class MaxHeap {

    private int capacity;
    private int size = 0;
    private int[] array;

    public MaxHeap(int capacity) {
        this.capacity = capacity;
        this.array = new int[capacity];
    }
}
 
private int getLeftChildIndex(int parentIndex) {
    return 2 * parentIndex + 1;
}

private int getRightChildIndex(int parentIndex) {
    return 2 * parentIndex + 2;
}

private int getParentIndex(int childIndex) {
    return (childIndex - 1) / 2;
}

private boolean hasLeftChild(int index) {
    return getLeftChildIndex(index) < size;
}

private boolean hasRightChild(int index) {
    return getRightChildIndex(index) < size;
}

private boolean hasParent(int index) {    //I think this is useless. since each node has parent except root.. 
    return getParentIndex(index) >= 0;    // But it wrote >=0, the getParentIndex(root)=0   ... useless
}

private int leftChild(int parentIndex) {
    return array[getLeftChildIndex(parentIndex)];
}

private int rightChild(int parentIndex) {
    return array[getRightChildIndex(parentIndex)];
}

private int parent(int childIndex) {
    return array[getParentIndex(childIndex)];
}




public void add(int item) { // Time Complexity: O(logN)
    if(size == capacity) {
        array = Arrays.copyOf(array, capacity * 2);
        capacity = capacity * 2;
    }
    array[size] = item;
    size++;
    heapifyUp();
}

private void heapifyUp() {
    int index = size - 1;
    while (hasParent(index) && parent(index) < array[index]) {
        swap(getParentIndex(index), index);
        index = getParentIndex(index);
    }
}

  
 
 
public void poll() { // Time Complexity: O(logN)
   if (size == 0) {
       throw new NoSuchElementException();
   }
   int element = array[0];
   array[0] = array[size - 1];
   size--;
   heapifyDown();
}

private void heapifyDown() {
    int index = 0;
    while (hasLeftChild(index)) {
        int largerChildIndex = getLeftChildIndex(index);
        if (hasRightChild(index) && rightChild(index) > leftChild(index)) {
            largerChildIndex = getRightChildIndex(index);
        }
        if (array[index] < array[largerChildIndex]) {
            swap(index, largerChildIndex);
        } else {
            break;
        }
        index = largerChildIndex;
    }
}
     
  
  
 
 public int peek() {
    if (size == 0) {
        throw new NoSuchElementException();
    }
    return array[0];
}

    private void swap(int index1, int index2) {
        int temp = array[index1];
        array[index1] = array[index2];
        array[index2] = temp;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    private void printHeap() {
        for (int i = 0; i < size; i++) {
            System.out.print(array[i] + ", ");
        }
        System.out.println();
    }
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
    
    
    
